// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package formation_talend.jgenerateclender_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: jGenerateClender Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class jGenerateClender implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dtDeb != null){
				
					String pattern_dtDeb = "yyyy-MM-dd HH:mm:ss";
					String value_dtDeb = "2024-03-01 00:00:00";
					String[] parts_dtDeb = value_dtDeb.split(";");
					if(parts_dtDeb.length > 1){
						pattern_dtDeb = parts_dtDeb[0];
						this.setProperty("dtDeb", pattern_dtDeb + ";" + FormatterUtils.format_Date(dtDeb, pattern_dtDeb));
					}else{
						this.setProperty("dtDeb", FormatterUtils.format_Date(dtDeb, pattern_dtDeb));
					}
				
			}
			
			if(dtFin != null){
				
					String pattern_dtFin = "yyyy-MM-dd HH:mm:ss";
					String value_dtFin = "2024-12-01 00:00:00";
					String[] parts_dtFin = value_dtFin.split(";");
					if(parts_dtFin.length > 1){
						pattern_dtFin = parts_dtFin[0];
						this.setProperty("dtFin", pattern_dtFin + ";" + FormatterUtils.format_Date(dtFin, pattern_dtFin));
					}else{
						this.setProperty("dtFin", FormatterUtils.format_Date(dtFin, pattern_dtFin));
					}
				
			}
			
			if(prFolder != null){
				
					this.setProperty("prFolder", prFolder.toString());
				
			}
			
			if(nameFile != null){
				
					this.setProperty("nameFile", nameFile.toString());
				
			}
			
			if(dtDebExecution != null){
				
					String pattern_dtDebExecution = "yyyy-MM-dd HH:mm:ss";
					String value_dtDebExecution = "2024-03-17 15:05:40";
					String[] parts_dtDebExecution = value_dtDebExecution.split(";");
					if(parts_dtDebExecution.length > 1){
						pattern_dtDebExecution = parts_dtDebExecution[0];
						this.setProperty("dtDebExecution", pattern_dtDebExecution + ";" + FormatterUtils.format_Date(dtDebExecution, pattern_dtDebExecution));
					}else{
						this.setProperty("dtDebExecution", FormatterUtils.format_Date(dtDebExecution, pattern_dtDebExecution));
					}
				
			}
			
			if(nbJours != null){
				
					this.setProperty("nbJours", nbJours.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public java.util.Date dtDeb;
public java.util.Date getDtDeb(){
	return this.dtDeb;
}
public java.util.Date dtFin;
public java.util.Date getDtFin(){
	return this.dtFin;
}
public String prFolder;
public String getPrFolder(){
	return this.prFolder;
}
public String nameFile;
public String getNameFile(){
	return this.nameFile;
}
public java.util.Date dtDebExecution;
public java.util.Date getDtDebExecution(){
	return this.dtDebExecution;
}
public Integer nbJours;
public Integer getNbJours(){
	return this.nbJours;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "jGenerateClender";
	private final String projectName = "FORMATION_TALEND";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				jGenerateClender.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(jGenerateClender.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void Implicit_Context_Database_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							Implicit_Context_Context_error(exception, errorComponent, globalMap);
						
						}
					
			public void Implicit_Context_Context_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					Implicit_Context_Database_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void Implicit_Context_Database_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row_Implicit_Context_DatabaseStruct implements routines.system.IPersistableRow<row_Implicit_Context_DatabaseStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_jGenerateClender = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_Implicit_Context_DatabaseStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void Implicit_Context_DatabaseProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("Implicit_Context_Database_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_Implicit_Context_DatabaseStruct row_Implicit_Context_Database = new row_Implicit_Context_DatabaseStruct();




	
	/**
	 * [Implicit_Context_Context begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Context", false);
		start_Hash.put("Implicit_Context_Context", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_Implicit_Context_Context = 0;
		
	java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	int nb_line_Implicit_Context_Context = 0;

 



/**
 * [Implicit_Context_Context begin ] stop
 */



	
	/**
	 * [Implicit_Context_Database begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Database", false);
		start_Hash.put("Implicit_Context_Database", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Database";
	
	currentComponent="Implicit_Context_Database";

	
		int tos_count_Implicit_Context_Database = 0;
		
	
    
	
		    int nb_line_Implicit_Context_Database = 0;
		    java.sql.Connection conn_Implicit_Context_Database = null;
				String driverClass_Implicit_Context_Database = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_Implicit_Context_Database = java.lang.Class.forName(driverClass_Implicit_Context_Database);
				String dbUser_Implicit_Context_Database = "postgres";
				
				 
	final String decryptedPassword_Implicit_Context_Database = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:2PwcZ7V+9aUL97CmzZ5B9FyStEG7CunqcUhkhUTDTv0=");
				
				String dbPwd_Implicit_Context_Database = decryptedPassword_Implicit_Context_Database;
				
				String url_Implicit_Context_Database = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "Formation_Talend";
				
				conn_Implicit_Context_Database = java.sql.DriverManager.getConnection(url_Implicit_Context_Database,dbUser_Implicit_Context_Database,dbPwd_Implicit_Context_Database);
		        
				conn_Implicit_Context_Database.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_Implicit_Context_Database = conn_Implicit_Context_Database.createStatement();

		    String dbquery_Implicit_Context_Database = "SELECT \n  \"CONFIG\".\"VARIABLES\".\"key\", \n  \"CONFIG\".\"VARIABLES\".\"value\"\nFROM \"CONFIG\".\"VARIABLES\"";
		    

            	globalMap.put("Implicit_Context_Database_QUERY",dbquery_Implicit_Context_Database);
		    java.sql.ResultSet rs_Implicit_Context_Database = null;

		    try {
		    	rs_Implicit_Context_Database = stmt_Implicit_Context_Database.executeQuery(dbquery_Implicit_Context_Database);
		    	java.sql.ResultSetMetaData rsmd_Implicit_Context_Database = rs_Implicit_Context_Database.getMetaData();
		    	int colQtyInRs_Implicit_Context_Database = rsmd_Implicit_Context_Database.getColumnCount();

		    String tmpContent_Implicit_Context_Database = null;
		    
		    
		    while (rs_Implicit_Context_Database.next()) {
		        nb_line_Implicit_Context_Database++;
		        
							if(colQtyInRs_Implicit_Context_Database < 1) {
								row_Implicit_Context_Database.key = null;
							} else {
	                         		
        	row_Implicit_Context_Database.key = routines.system.JDBCUtil.getString(rs_Implicit_Context_Database, 1, false);
		                    }
							if(colQtyInRs_Implicit_Context_Database < 2) {
								row_Implicit_Context_Database.value = null;
							} else {
	                         		
        	row_Implicit_Context_Database.value = routines.system.JDBCUtil.getString(rs_Implicit_Context_Database, 2, false);
		                    }
					


 



/**
 * [Implicit_Context_Database begin ] stop
 */
	
	/**
	 * [Implicit_Context_Database main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Database";
	
	currentComponent="Implicit_Context_Database";

	

 


	tos_count_Implicit_Context_Database++;

/**
 * [Implicit_Context_Database main ] stop
 */
	
	/**
	 * [Implicit_Context_Database process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Database";
	
	currentComponent="Implicit_Context_Database";

	

 



/**
 * [Implicit_Context_Database process_data_begin ] stop
 */

	
	/**
	 * [Implicit_Context_Context main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main"
						
						);
					}
					
        //////////////////////////
        String tmp_key_Implicit_Context_Context = null;
                    String key_Implicit_Context_Context = null;
                      if (row_Implicit_Context_Database.key != null){
                          tmp_key_Implicit_Context_Context = row_Implicit_Context_Database.key.trim();
                        if ((tmp_key_Implicit_Context_Context.startsWith("#") || tmp_key_Implicit_Context_Context.startsWith("!") )){
                          tmp_key_Implicit_Context_Context = null;
                        } else {
                          row_Implicit_Context_Database.key = tmp_key_Implicit_Context_Context;
                        }
                      }
                        if(row_Implicit_Context_Database.key != null) {
                    key_Implicit_Context_Context =
                        row_Implicit_Context_Database.key;
                        }
                    String value_Implicit_Context_Context = null;
                        if(row_Implicit_Context_Database.value != null) {
                    value_Implicit_Context_Context =
                        row_Implicit_Context_Database.value;
                        }
				
				String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;
				

                        System.out.println("Implicit_Context_Context set key \"" + key_Implicit_Context_Context + "\" with value \"" + currentValue_Implicit_Context_Context + "\"");
  if (tmp_key_Implicit_Context_Context != null){
  try{
        if(key_Implicit_Context_Context!=null && "dtDeb".equals(key_Implicit_Context_Context))
        {
                String context_dtDeb_value = context.getProperty("dtDeb");
                if(context_dtDeb_value==null)
                    context_dtDeb_value = "";
                int context_dtDeb_pos = context_dtDeb_value.indexOf(";");
                String context_dtDeb_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_dtDeb_pos > -1){
                    context_dtDeb_pattern = context_dtDeb_value.substring(0, context_dtDeb_pos);
                }
                context.dtDeb=(java.util.Date)(new java.text.SimpleDateFormat(context_dtDeb_pattern).parse(value_Implicit_Context_Context));

        }

        if(key_Implicit_Context_Context!=null && "dtFin".equals(key_Implicit_Context_Context))
        {
                String context_dtFin_value = context.getProperty("dtFin");
                if(context_dtFin_value==null)
                    context_dtFin_value = "";
                int context_dtFin_pos = context_dtFin_value.indexOf(";");
                String context_dtFin_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_dtFin_pos > -1){
                    context_dtFin_pattern = context_dtFin_value.substring(0, context_dtFin_pos);
                }
                context.dtFin=(java.util.Date)(new java.text.SimpleDateFormat(context_dtFin_pattern).parse(value_Implicit_Context_Context));

        }

        if(key_Implicit_Context_Context!=null && "prFolder".equals(key_Implicit_Context_Context))
        {
           context.prFolder=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "nameFile".equals(key_Implicit_Context_Context))
        {
           context.nameFile=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "dtDebExecution".equals(key_Implicit_Context_Context))
        {
                String context_dtDebExecution_value = context.getProperty("dtDebExecution");
                if(context_dtDebExecution_value==null)
                    context_dtDebExecution_value = "";
                int context_dtDebExecution_pos = context_dtDebExecution_value.indexOf(";");
                String context_dtDebExecution_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_dtDebExecution_pos > -1){
                    context_dtDebExecution_pattern = context_dtDebExecution_value.substring(0, context_dtDebExecution_pos);
                }
                context.dtDebExecution=(java.util.Date)(new java.text.SimpleDateFormat(context_dtDebExecution_pattern).parse(value_Implicit_Context_Context));

        }

        if(key_Implicit_Context_Context!=null && "nbJours".equals(key_Implicit_Context_Context))
        {

                context.nbJours=Integer.parseInt(value_Implicit_Context_Context);

        }


        if (context.getProperty(key_Implicit_Context_Context)!=null)
        {
            assignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }else  {
            newPropertyList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }
        if(value_Implicit_Context_Context == null){
            context.setProperty(key_Implicit_Context_Context, "");
        }else{
            context.setProperty(key_Implicit_Context_Context,value_Implicit_Context_Context);
        }
    }catch(java.lang.Exception e){
globalMap.put("Implicit_Context_Context_ERROR_MESSAGE",e.getMessage());
        System.err.println("Setting a value for the key \"" + key_Implicit_Context_Context + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_Implicit_Context_Context++;
    }
        //////////////////////////

 


	tos_count_Implicit_Context_Context++;

/**
 * [Implicit_Context_Context main ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_begin ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_end ] stop
 */



	
	/**
	 * [Implicit_Context_Database process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Database";
	
	currentComponent="Implicit_Context_Database";

	

 



/**
 * [Implicit_Context_Database process_data_end ] stop
 */
	
	/**
	 * [Implicit_Context_Database end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Database";
	
	currentComponent="Implicit_Context_Database";

	

	}
}finally{
	if (rs_Implicit_Context_Database != null) {
		rs_Implicit_Context_Database.close();
	}
	if (stmt_Implicit_Context_Database != null) {
		stmt_Implicit_Context_Database.close();
	}
	if(conn_Implicit_Context_Database != null && !conn_Implicit_Context_Database.isClosed()) {
		
			conn_Implicit_Context_Database.commit();
			
		
			conn_Implicit_Context_Database.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("Implicit_Context_Database_NB_LINE",nb_line_Implicit_Context_Database);
 

ok_Hash.put("Implicit_Context_Database", true);
end_Hash.put("Implicit_Context_Database", System.currentTimeMillis());




/**
 * [Implicit_Context_Database end ] stop
 */

	
	/**
	 * [Implicit_Context_Context end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
	
	java.util.Enumeration<?> enu_Implicit_Context_Context = context.propertyNames();
    while(enu_Implicit_Context_Context.hasMoreElements())
    {           
    	String key_Implicit_Context_Context = (String)enu_Implicit_Context_Context.nextElement();
        if(!assignList_Implicit_Context_Context.contains(key_Implicit_Context_Context) && !newPropertyList_Implicit_Context_Context.contains(key_Implicit_Context_Context))
        {
            noAssignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }          
    } 

    String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context.toString();
    String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context.substring(1, newPropertyStr_Implicit_Context_Context.length() - 1);
    
    String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context.toString();
    String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context.substring(1, noAssignStr_Implicit_Context_Context.length() - 1);
    
    globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT", newProperty_Implicit_Context_Context);
    globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED", noAssign_Implicit_Context_Context);

    globalMap.put("Implicit_Context_Context_NB_LINE",nb_line_Implicit_Context_Context);

	List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_Implicit_Context_Context));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("Implicit_Context_Context", true);
end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());




/**
 * [Implicit_Context_Context end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [Implicit_Context_Database finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Database";
	
	currentComponent="Implicit_Context_Database";

	

 



/**
 * [Implicit_Context_Database finally ] stop
 */

	
	/**
	 * [Implicit_Context_Context finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("Implicit_Context_Database_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


context.nbJours =  (int)TalendDate.diffDate(context.dtFin, context.dtDeb,"dd")+1;

context.dtDebExecution = TalendDate.getCurrentDate();

System.out.println("***************************");

System.out.println("Début de la génération de calendrier: "+TalendDate.formatDate("dd-MM-yyyy HH:mm:ss", context.dtDebExecution));

System.out.println("Nombre de jours a générer: " +context.nbJours);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_jGenerateClender = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[0];

	
			    public Integer ID_JOUR;

				public Integer getID_JOUR () {
					return this.ID_JOUR;
				}
				
			    public java.util.Date DT_JOUR;

				public java.util.Date getDT_JOUR () {
					return this.DT_JOUR;
				}
				
			    public Integer NB_ANNEE;

				public Integer getNB_ANNEE () {
					return this.NB_ANNEE;
				}
				
			    public Integer NB_SEMESTRE;

				public Integer getNB_SEMESTRE () {
					return this.NB_SEMESTRE;
				}
				
			    public Integer NB_TRIMESTRE;

				public Integer getNB_TRIMESTRE () {
					return this.NB_TRIMESTRE;
				}
				
			    public Integer NB_MOIS;

				public Integer getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public Integer NB_JOUR_ANNEE;

				public Integer getNB_JOUR_ANNEE () {
					return this.NB_JOUR_ANNEE;
				}
				
			    public Integer NB_JOUR_MOIS;

				public Integer getNB_JOUR_MOIS () {
					return this.NB_JOUR_MOIS;
				}
				
			    public Integer NB_JOUR_SEMAINE;

				public Integer getNB_JOUR_SEMAINE () {
					return this.NB_JOUR_SEMAINE;
				}
				
			    public Integer NB_SEMAINE_ANNEE;

				public Integer getNB_SEMAINE_ANNEE () {
					return this.NB_SEMAINE_ANNEE;
				}
				
			    public String LB_MOIS;

				public String getLB_MOIS () {
					return this.LB_MOIS;
				}
				
			    public String LB_JOUR;

				public String getLB_JOUR () {
					return this.LB_JOUR;
				}
				
			    public Integer BL_DERNIERE_JOUR_;

				public Integer getBL_DERNIERE_JOUR_ () {
					return this.BL_DERNIERE_JOUR_;
				}
				
			    public Integer BL_BISEXTILE;

				public Integer getBL_BISEXTILE () {
					return this.BL_BISEXTILE;
				}
				
			    public Integer BL_WEEK_END;

				public Integer getBL_WEEK_END () {
					return this.BL_WEEK_END;
				}
				
			    public Integer BL_JOUR_FERIE;

				public Integer getBL_JOUR_FERIE () {
					return this.BL_JOUR_FERIE;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.ID_JOUR = readInteger(dis);
					
					this.DT_JOUR = readDate(dis);
					
						this.NB_ANNEE = readInteger(dis);
					
						this.NB_SEMESTRE = readInteger(dis);
					
						this.NB_TRIMESTRE = readInteger(dis);
					
						this.NB_MOIS = readInteger(dis);
					
						this.NB_JOUR_ANNEE = readInteger(dis);
					
						this.NB_JOUR_MOIS = readInteger(dis);
					
						this.NB_JOUR_SEMAINE = readInteger(dis);
					
						this.NB_SEMAINE_ANNEE = readInteger(dis);
					
					this.LB_MOIS = readString(dis);
					
					this.LB_JOUR = readString(dis);
					
						this.BL_DERNIERE_JOUR_ = readInteger(dis);
					
						this.BL_BISEXTILE = readInteger(dis);
					
						this.BL_WEEK_END = readInteger(dis);
					
						this.BL_JOUR_FERIE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.ID_JOUR = readInteger(dis);
					
					this.DT_JOUR = readDate(dis);
					
						this.NB_ANNEE = readInteger(dis);
					
						this.NB_SEMESTRE = readInteger(dis);
					
						this.NB_TRIMESTRE = readInteger(dis);
					
						this.NB_MOIS = readInteger(dis);
					
						this.NB_JOUR_ANNEE = readInteger(dis);
					
						this.NB_JOUR_MOIS = readInteger(dis);
					
						this.NB_JOUR_SEMAINE = readInteger(dis);
					
						this.NB_SEMAINE_ANNEE = readInteger(dis);
					
					this.LB_MOIS = readString(dis);
					
					this.LB_JOUR = readString(dis);
					
						this.BL_DERNIERE_JOUR_ = readInteger(dis);
					
						this.BL_BISEXTILE = readInteger(dis);
					
						this.BL_WEEK_END = readInteger(dis);
					
						this.BL_JOUR_FERIE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_JOUR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_JOUR,dos);
					
					// Integer
				
						writeInteger(this.NB_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_TRIMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_SEMAINE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMAINE_ANNEE,dos);
					
					// String
				
						writeString(this.LB_MOIS,dos);
					
					// String
				
						writeString(this.LB_JOUR,dos);
					
					// Integer
				
						writeInteger(this.BL_DERNIERE_JOUR_,dos);
					
					// Integer
				
						writeInteger(this.BL_BISEXTILE,dos);
					
					// Integer
				
						writeInteger(this.BL_WEEK_END,dos);
					
					// Integer
				
						writeInteger(this.BL_JOUR_FERIE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_JOUR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_JOUR,dos);
					
					// Integer
				
						writeInteger(this.NB_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_TRIMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_SEMAINE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMAINE_ANNEE,dos);
					
					// String
				
						writeString(this.LB_MOIS,dos);
					
					// String
				
						writeString(this.LB_JOUR,dos);
					
					// Integer
				
						writeInteger(this.BL_DERNIERE_JOUR_,dos);
					
					// Integer
				
						writeInteger(this.BL_BISEXTILE,dos);
					
					// Integer
				
						writeInteger(this.BL_WEEK_END,dos);
					
					// Integer
				
						writeInteger(this.BL_JOUR_FERIE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_JOUR="+String.valueOf(ID_JOUR));
		sb.append(",DT_JOUR="+String.valueOf(DT_JOUR));
		sb.append(",NB_ANNEE="+String.valueOf(NB_ANNEE));
		sb.append(",NB_SEMESTRE="+String.valueOf(NB_SEMESTRE));
		sb.append(",NB_TRIMESTRE="+String.valueOf(NB_TRIMESTRE));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",NB_JOUR_ANNEE="+String.valueOf(NB_JOUR_ANNEE));
		sb.append(",NB_JOUR_MOIS="+String.valueOf(NB_JOUR_MOIS));
		sb.append(",NB_JOUR_SEMAINE="+String.valueOf(NB_JOUR_SEMAINE));
		sb.append(",NB_SEMAINE_ANNEE="+String.valueOf(NB_SEMAINE_ANNEE));
		sb.append(",LB_MOIS="+LB_MOIS);
		sb.append(",LB_JOUR="+LB_JOUR);
		sb.append(",BL_DERNIERE_JOUR_="+String.valueOf(BL_DERNIERE_JOUR_));
		sb.append(",BL_BISEXTILE="+String.valueOf(BL_BISEXTILE));
		sb.append(",BL_WEEK_END="+String.valueOf(BL_WEEK_END));
		sb.append(",BL_JOUR_FERIE="+String.valueOf(BL_JOUR_FERIE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_jGenerateClender = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[0];

	
			    public Integer ID_JOUR;

				public Integer getID_JOUR () {
					return this.ID_JOUR;
				}
				
			    public java.util.Date DT_JOUR;

				public java.util.Date getDT_JOUR () {
					return this.DT_JOUR;
				}
				
			    public Integer NB_ANNEE;

				public Integer getNB_ANNEE () {
					return this.NB_ANNEE;
				}
				
			    public Integer NB_SEMESTRE;

				public Integer getNB_SEMESTRE () {
					return this.NB_SEMESTRE;
				}
				
			    public Integer NB_TRIMESTRE;

				public Integer getNB_TRIMESTRE () {
					return this.NB_TRIMESTRE;
				}
				
			    public Integer NB_MOIS;

				public Integer getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public Integer NB_JOUR_ANNEE;

				public Integer getNB_JOUR_ANNEE () {
					return this.NB_JOUR_ANNEE;
				}
				
			    public Integer NB_JOUR_MOIS;

				public Integer getNB_JOUR_MOIS () {
					return this.NB_JOUR_MOIS;
				}
				
			    public Integer NB_JOUR_SEMAINE;

				public Integer getNB_JOUR_SEMAINE () {
					return this.NB_JOUR_SEMAINE;
				}
				
			    public Integer NB_SEMAINE_ANNEE;

				public Integer getNB_SEMAINE_ANNEE () {
					return this.NB_SEMAINE_ANNEE;
				}
				
			    public String LB_MOIS;

				public String getLB_MOIS () {
					return this.LB_MOIS;
				}
				
			    public String LB_JOUR;

				public String getLB_JOUR () {
					return this.LB_JOUR;
				}
				
			    public Integer BL_DERNIERE_JOUR_;

				public Integer getBL_DERNIERE_JOUR_ () {
					return this.BL_DERNIERE_JOUR_;
				}
				
			    public Integer BL_BISEXTILE;

				public Integer getBL_BISEXTILE () {
					return this.BL_BISEXTILE;
				}
				
			    public Integer BL_WEEK_END;

				public Integer getBL_WEEK_END () {
					return this.BL_WEEK_END;
				}
				
			    public Integer BL_JOUR_FERIE;

				public Integer getBL_JOUR_FERIE () {
					return this.BL_JOUR_FERIE;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.ID_JOUR = readInteger(dis);
					
					this.DT_JOUR = readDate(dis);
					
						this.NB_ANNEE = readInteger(dis);
					
						this.NB_SEMESTRE = readInteger(dis);
					
						this.NB_TRIMESTRE = readInteger(dis);
					
						this.NB_MOIS = readInteger(dis);
					
						this.NB_JOUR_ANNEE = readInteger(dis);
					
						this.NB_JOUR_MOIS = readInteger(dis);
					
						this.NB_JOUR_SEMAINE = readInteger(dis);
					
						this.NB_SEMAINE_ANNEE = readInteger(dis);
					
					this.LB_MOIS = readString(dis);
					
					this.LB_JOUR = readString(dis);
					
						this.BL_DERNIERE_JOUR_ = readInteger(dis);
					
						this.BL_BISEXTILE = readInteger(dis);
					
						this.BL_WEEK_END = readInteger(dis);
					
						this.BL_JOUR_FERIE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.ID_JOUR = readInteger(dis);
					
					this.DT_JOUR = readDate(dis);
					
						this.NB_ANNEE = readInteger(dis);
					
						this.NB_SEMESTRE = readInteger(dis);
					
						this.NB_TRIMESTRE = readInteger(dis);
					
						this.NB_MOIS = readInteger(dis);
					
						this.NB_JOUR_ANNEE = readInteger(dis);
					
						this.NB_JOUR_MOIS = readInteger(dis);
					
						this.NB_JOUR_SEMAINE = readInteger(dis);
					
						this.NB_SEMAINE_ANNEE = readInteger(dis);
					
					this.LB_MOIS = readString(dis);
					
					this.LB_JOUR = readString(dis);
					
						this.BL_DERNIERE_JOUR_ = readInteger(dis);
					
						this.BL_BISEXTILE = readInteger(dis);
					
						this.BL_WEEK_END = readInteger(dis);
					
						this.BL_JOUR_FERIE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_JOUR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_JOUR,dos);
					
					// Integer
				
						writeInteger(this.NB_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_TRIMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_SEMAINE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMAINE_ANNEE,dos);
					
					// String
				
						writeString(this.LB_MOIS,dos);
					
					// String
				
						writeString(this.LB_JOUR,dos);
					
					// Integer
				
						writeInteger(this.BL_DERNIERE_JOUR_,dos);
					
					// Integer
				
						writeInteger(this.BL_BISEXTILE,dos);
					
					// Integer
				
						writeInteger(this.BL_WEEK_END,dos);
					
					// Integer
				
						writeInteger(this.BL_JOUR_FERIE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_JOUR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_JOUR,dos);
					
					// Integer
				
						writeInteger(this.NB_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_TRIMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_SEMAINE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMAINE_ANNEE,dos);
					
					// String
				
						writeString(this.LB_MOIS,dos);
					
					// String
				
						writeString(this.LB_JOUR,dos);
					
					// Integer
				
						writeInteger(this.BL_DERNIERE_JOUR_,dos);
					
					// Integer
				
						writeInteger(this.BL_BISEXTILE,dos);
					
					// Integer
				
						writeInteger(this.BL_WEEK_END,dos);
					
					// Integer
				
						writeInteger(this.BL_JOUR_FERIE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_JOUR="+String.valueOf(ID_JOUR));
		sb.append(",DT_JOUR="+String.valueOf(DT_JOUR));
		sb.append(",NB_ANNEE="+String.valueOf(NB_ANNEE));
		sb.append(",NB_SEMESTRE="+String.valueOf(NB_SEMESTRE));
		sb.append(",NB_TRIMESTRE="+String.valueOf(NB_TRIMESTRE));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",NB_JOUR_ANNEE="+String.valueOf(NB_JOUR_ANNEE));
		sb.append(",NB_JOUR_MOIS="+String.valueOf(NB_JOUR_MOIS));
		sb.append(",NB_JOUR_SEMAINE="+String.valueOf(NB_JOUR_SEMAINE));
		sb.append(",NB_SEMAINE_ANNEE="+String.valueOf(NB_SEMAINE_ANNEE));
		sb.append(",LB_MOIS="+LB_MOIS);
		sb.append(",LB_JOUR="+LB_JOUR);
		sb.append(",BL_DERNIERE_JOUR_="+String.valueOf(BL_DERNIERE_JOUR_));
		sb.append(",BL_BISEXTILE="+String.valueOf(BL_BISEXTILE));
		sb.append(",BL_WEEK_END="+String.valueOf(BL_WEEK_END));
		sb.append(",BL_JOUR_FERIE="+String.valueOf(BL_JOUR_FERIE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_jGenerateClender = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[0];

	
			    public Integer ID_JOUR;

				public Integer getID_JOUR () {
					return this.ID_JOUR;
				}
				
			    public java.util.Date DT_JOUR;

				public java.util.Date getDT_JOUR () {
					return this.DT_JOUR;
				}
				
			    public Integer NB_ANNEE;

				public Integer getNB_ANNEE () {
					return this.NB_ANNEE;
				}
				
			    public Integer NB_SEMESTRE;

				public Integer getNB_SEMESTRE () {
					return this.NB_SEMESTRE;
				}
				
			    public Integer NB_TRIMESTRE;

				public Integer getNB_TRIMESTRE () {
					return this.NB_TRIMESTRE;
				}
				
			    public Integer NB_MOIS;

				public Integer getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public Integer NB_JOUR_ANNEE;

				public Integer getNB_JOUR_ANNEE () {
					return this.NB_JOUR_ANNEE;
				}
				
			    public Integer NB_JOUR_MOIS;

				public Integer getNB_JOUR_MOIS () {
					return this.NB_JOUR_MOIS;
				}
				
			    public Integer NB_JOUR_SEMAINE;

				public Integer getNB_JOUR_SEMAINE () {
					return this.NB_JOUR_SEMAINE;
				}
				
			    public Integer NB_SEMAINE_ANNEE;

				public Integer getNB_SEMAINE_ANNEE () {
					return this.NB_SEMAINE_ANNEE;
				}
				
			    public String LB_MOIS;

				public String getLB_MOIS () {
					return this.LB_MOIS;
				}
				
			    public String LB_JOUR;

				public String getLB_JOUR () {
					return this.LB_JOUR;
				}
				
			    public Integer BL_DERNIERE_JOUR_;

				public Integer getBL_DERNIERE_JOUR_ () {
					return this.BL_DERNIERE_JOUR_;
				}
				
			    public Integer BL_BISEXTILE;

				public Integer getBL_BISEXTILE () {
					return this.BL_BISEXTILE;
				}
				
			    public Integer BL_WEEK_END;

				public Integer getBL_WEEK_END () {
					return this.BL_WEEK_END;
				}
				
			    public Integer BL_JOUR_FERIE;

				public Integer getBL_JOUR_FERIE () {
					return this.BL_JOUR_FERIE;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_jGenerateClender.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_jGenerateClender.length == 0) {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_jGenerateClender, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.ID_JOUR = readInteger(dis);
					
					this.DT_JOUR = readDate(dis);
					
						this.NB_ANNEE = readInteger(dis);
					
						this.NB_SEMESTRE = readInteger(dis);
					
						this.NB_TRIMESTRE = readInteger(dis);
					
						this.NB_MOIS = readInteger(dis);
					
						this.NB_JOUR_ANNEE = readInteger(dis);
					
						this.NB_JOUR_MOIS = readInteger(dis);
					
						this.NB_JOUR_SEMAINE = readInteger(dis);
					
						this.NB_SEMAINE_ANNEE = readInteger(dis);
					
					this.LB_MOIS = readString(dis);
					
					this.LB_JOUR = readString(dis);
					
						this.BL_DERNIERE_JOUR_ = readInteger(dis);
					
						this.BL_BISEXTILE = readInteger(dis);
					
						this.BL_WEEK_END = readInteger(dis);
					
						this.BL_JOUR_FERIE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.ID_JOUR = readInteger(dis);
					
					this.DT_JOUR = readDate(dis);
					
						this.NB_ANNEE = readInteger(dis);
					
						this.NB_SEMESTRE = readInteger(dis);
					
						this.NB_TRIMESTRE = readInteger(dis);
					
						this.NB_MOIS = readInteger(dis);
					
						this.NB_JOUR_ANNEE = readInteger(dis);
					
						this.NB_JOUR_MOIS = readInteger(dis);
					
						this.NB_JOUR_SEMAINE = readInteger(dis);
					
						this.NB_SEMAINE_ANNEE = readInteger(dis);
					
					this.LB_MOIS = readString(dis);
					
					this.LB_JOUR = readString(dis);
					
						this.BL_DERNIERE_JOUR_ = readInteger(dis);
					
						this.BL_BISEXTILE = readInteger(dis);
					
						this.BL_WEEK_END = readInteger(dis);
					
						this.BL_JOUR_FERIE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_JOUR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_JOUR,dos);
					
					// Integer
				
						writeInteger(this.NB_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_TRIMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_SEMAINE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMAINE_ANNEE,dos);
					
					// String
				
						writeString(this.LB_MOIS,dos);
					
					// String
				
						writeString(this.LB_JOUR,dos);
					
					// Integer
				
						writeInteger(this.BL_DERNIERE_JOUR_,dos);
					
					// Integer
				
						writeInteger(this.BL_BISEXTILE,dos);
					
					// Integer
				
						writeInteger(this.BL_WEEK_END,dos);
					
					// Integer
				
						writeInteger(this.BL_JOUR_FERIE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_JOUR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_JOUR,dos);
					
					// Integer
				
						writeInteger(this.NB_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_TRIMESTRE,dos);
					
					// Integer
				
						writeInteger(this.NB_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_ANNEE,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_MOIS,dos);
					
					// Integer
				
						writeInteger(this.NB_JOUR_SEMAINE,dos);
					
					// Integer
				
						writeInteger(this.NB_SEMAINE_ANNEE,dos);
					
					// String
				
						writeString(this.LB_MOIS,dos);
					
					// String
				
						writeString(this.LB_JOUR,dos);
					
					// Integer
				
						writeInteger(this.BL_DERNIERE_JOUR_,dos);
					
					// Integer
				
						writeInteger(this.BL_BISEXTILE,dos);
					
					// Integer
				
						writeInteger(this.BL_WEEK_END,dos);
					
					// Integer
				
						writeInteger(this.BL_JOUR_FERIE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_JOUR="+String.valueOf(ID_JOUR));
		sb.append(",DT_JOUR="+String.valueOf(DT_JOUR));
		sb.append(",NB_ANNEE="+String.valueOf(NB_ANNEE));
		sb.append(",NB_SEMESTRE="+String.valueOf(NB_SEMESTRE));
		sb.append(",NB_TRIMESTRE="+String.valueOf(NB_TRIMESTRE));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",NB_JOUR_ANNEE="+String.valueOf(NB_JOUR_ANNEE));
		sb.append(",NB_JOUR_MOIS="+String.valueOf(NB_JOUR_MOIS));
		sb.append(",NB_JOUR_SEMAINE="+String.valueOf(NB_JOUR_SEMAINE));
		sb.append(",NB_SEMAINE_ANNEE="+String.valueOf(NB_SEMAINE_ANNEE));
		sb.append(",LB_MOIS="+LB_MOIS);
		sb.append(",LB_JOUR="+LB_JOUR);
		sb.append(",BL_DERNIERE_JOUR_="+String.valueOf(BL_DERNIERE_JOUR_));
		sb.append(",BL_BISEXTILE="+String.valueOf(BL_BISEXTILE));
		sb.append(",BL_WEEK_END="+String.valueOf(BL_WEEK_END));
		sb.append(",BL_JOUR_FERIE="+String.valueOf(BL_JOUR_FERIE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_jGenerateClender = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[0];

	
			    public java.util.Date DtJour;

				public java.util.Date getDtJour () {
					return this.DtJour;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
					this.DtJour = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
					this.DtJour = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DtJour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DtJour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DtJour="+String.valueOf(DtJour));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_jGenerateClender = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_jGenerateClender = new byte[0];

	
			    public Integer NUM_LIGNE;

				public Integer getNUM_LIGNE () {
					return this.NUM_LIGNE;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.NUM_LIGNE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_jGenerateClender) {

        	try {

        		int length = 0;
		
						this.NUM_LIGNE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.NUM_LIGNE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.NUM_LIGNE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUM_LIGNE="+String.valueOf(NUM_LIGNE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();
row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();







	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[16];

        public void addRow(String[] row) {

            for (int i = 0; i < 16; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 15 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 15 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[15] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("Calendrier<br>__UNIQUE_NAME__");
        util_tLogRow_1.addRow(new String[]{"ID_JOUR","DT_JOUR","NB_ANNEE","NB_SEMESTRE","NB_TRIMESTRE","NB_MOIS","NB_JOUR_ANNEE","NB_JOUR_MOIS","NB_JOUR_SEMAINE","NB_SEMAINE_ANNEE","LB_MOIS","LB_JOUR","BL_DERNIERE_JOUR_","BL_BISEXTILE","BL_WEEK_END","BL_JOUR_FERIE",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		
		int columnIndex_tFileOutputExcel_1 = 0;
		boolean headerIsInserted_tFileOutputExcel_1 = false;
		
		
		String fileName_tFileOutputExcel_1=context.prFolder +"/" +  context.nameFile;
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
    xlsxTool_tFileOutputExcel_1.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_1.setSheet("Calendrier");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false, false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ID_JOUR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DT_JOUR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_ANNEE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_SEMESTRE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_TRIMESTRE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_MOIS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_JOUR_ANNEE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_JOUR_MOIS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_JOUR_SEMAINE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NB_SEMAINE_ANNEE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LB_MOIS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LB_JOUR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BL_DERNIERE_JOUR_");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BL_BISEXTILE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BL_WEEK_END");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BL_JOUR_FERIE");
		
		nb_line_tFileOutputExcel_1++;
		headerIsInserted_tFileOutputExcel_1 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";

	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = context.nbJours;


class tRowGenerator_1Randomizer {
	public Integer getRandomNUM_LIGNE() {
		
		return Numeric.sequence("s1" ,0 ,1 );
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row1.NUM_LIGNE = randtRowGenerator_1.getRandomNUM_LIGNE();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.DtJour = TalendDate.addDate(context.dtDeb,row1.NUM_LIGNE,"dd") ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.ID_JOUR = Integer.parseInt(TalendDate.formatDate("YYYYMMDD", out1.DtJour)) ;
out2_tmp.DT_JOUR = out1.DtJour ;
out2_tmp.NB_ANNEE = TalendDate.getPartOfDate("YEAR", out1.DtJour) ;
out2_tmp.NB_SEMESTRE = TalendDate.getPartOfDate("MONTH", out1.DtJour)<6?1:2 ;
out2_tmp.NB_TRIMESTRE = TalendDate.getPartOfDate("MONTH", out1.DtJour)<3?1:
TalendDate.getPartOfDate("MONTH", out1.DtJour)<6?2:
TalendDate.getPartOfDate("MONTH", out1.DtJour)<9?3:4 ;
out2_tmp.NB_MOIS = TalendDate.getPartOfDate("MONTH", out1.DtJour)+1 ;
out2_tmp.NB_JOUR_ANNEE = TalendDate.getPartOfDate("DAY_OF_YEAR", out1.DtJour) ;
out2_tmp.NB_JOUR_MOIS = TalendDate.getPartOfDate("DAY_OF_MONTH", out1.DtJour) ;
out2_tmp.NB_JOUR_SEMAINE = TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)-1==0?7:
TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)-1 ;
out2_tmp.NB_SEMAINE_ANNEE = TalendDate.getPartOfDate("WEEK_OF_YEAR", out1.DtJour) ;
out2_tmp.LB_MOIS = TalendDate.formatDate("MMMM", out1.DtJour).substring(0,1).toUpperCase()+
TalendDate.formatDate("MMMM", out1.DtJour).substring(1,
TalendDate.formatDate("MMMM", out1.DtJour).length()) ;
out2_tmp.LB_JOUR = TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)==2?"Lundi":
TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)==3?"Mardi":
TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)==4?"Mercredi":
TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)==5?"Jeudi":
TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)==6?"Vendredi":
TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)==7?"Samedi":"Dimanche" ;
out2_tmp.BL_DERNIERE_JOUR_ = TalendDate.compareDate(TalendDate.getLastDayOfMonth(out1.DtJour), out1.DtJour , "YYYY-MM-DD")==0?1:0 ;
out2_tmp.BL_BISEXTILE = ((double)TalendDate.getPartOfDate("YEAR", out1.DtJour )/4)==Math.floor(TalendDate.getPartOfDate("YEAR", out1.DtJour )/4)?1:0 ;
out2_tmp.BL_WEEK_END = TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)== 7  ||
TalendDate.getPartOfDate("DAY_OF_WEEK", out1.DtJour)== 1 ?1:0 ;
out2_tmp.BL_JOUR_FERIE =  0;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					


	row2 = new row2Struct();
						
	row2.ID_JOUR = out2.ID_JOUR;								
	row2.DT_JOUR = out2.DT_JOUR;								
	row2.NB_ANNEE = out2.NB_ANNEE;								
	row2.NB_SEMESTRE = out2.NB_SEMESTRE;								
	row2.NB_TRIMESTRE = out2.NB_TRIMESTRE;								
	row2.NB_MOIS = out2.NB_MOIS;								
	row2.NB_JOUR_ANNEE = out2.NB_JOUR_ANNEE;								
	row2.NB_JOUR_MOIS = out2.NB_JOUR_MOIS;								
	row2.NB_JOUR_SEMAINE = out2.NB_JOUR_SEMAINE;								
	row2.NB_SEMAINE_ANNEE = out2.NB_SEMAINE_ANNEE;								
	row2.LB_MOIS = out2.LB_MOIS;								
	row2.LB_JOUR = out2.LB_JOUR;								
	row2.BL_DERNIERE_JOUR_ = out2.BL_DERNIERE_JOUR_;								
	row2.BL_BISEXTILE = out2.BL_BISEXTILE;								
	row2.BL_WEEK_END = out2.BL_WEEK_END;								
	row2.BL_JOUR_FERIE = out2.BL_JOUR_FERIE;			
	row3 = new row3Struct();
						
	row3.ID_JOUR = out2.ID_JOUR;								
	row3.DT_JOUR = out2.DT_JOUR;								
	row3.NB_ANNEE = out2.NB_ANNEE;								
	row3.NB_SEMESTRE = out2.NB_SEMESTRE;								
	row3.NB_TRIMESTRE = out2.NB_TRIMESTRE;								
	row3.NB_MOIS = out2.NB_MOIS;								
	row3.NB_JOUR_ANNEE = out2.NB_JOUR_ANNEE;								
	row3.NB_JOUR_MOIS = out2.NB_JOUR_MOIS;								
	row3.NB_JOUR_SEMAINE = out2.NB_JOUR_SEMAINE;								
	row3.NB_SEMAINE_ANNEE = out2.NB_SEMAINE_ANNEE;								
	row3.LB_MOIS = out2.LB_MOIS;								
	row3.LB_JOUR = out2.LB_JOUR;								
	row3.BL_DERNIERE_JOUR_ = out2.BL_DERNIERE_JOUR_;								
	row3.BL_BISEXTILE = out2.BL_BISEXTILE;								
	row3.BL_WEEK_END = out2.BL_WEEK_END;								
	row3.BL_JOUR_FERIE = out2.BL_JOUR_FERIE;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[16];
   				
	    		if(row2.ID_JOUR != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row2.ID_JOUR)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.DT_JOUR != null) { //              
                 row_tLogRow_1[1]=    						
								FormatterUtils.format_Date(row2.DT_JOUR, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_ANNEE != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row2.NB_ANNEE)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_SEMESTRE != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row2.NB_SEMESTRE)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_TRIMESTRE != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row2.NB_TRIMESTRE)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_MOIS != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row2.NB_MOIS)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_JOUR_ANNEE != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row2.NB_JOUR_ANNEE)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_JOUR_MOIS != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row2.NB_JOUR_MOIS)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_JOUR_SEMAINE != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row2.NB_JOUR_SEMAINE)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.NB_SEMAINE_ANNEE != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row2.NB_SEMAINE_ANNEE)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.LB_MOIS != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row2.LB_MOIS)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.LB_JOUR != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(row2.LB_JOUR)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.BL_DERNIERE_JOUR_ != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row2.BL_DERNIERE_JOUR_)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.BL_BISEXTILE != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row2.BL_BISEXTILE)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.BL_WEEK_END != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(row2.BL_WEEK_END)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.BL_JOUR_FERIE != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(row2.BL_JOUR_FERIE)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row3.ID_JOUR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.ID_JOUR)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.DT_JOUR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(row3.DT_JOUR, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_ANNEE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_ANNEE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_SEMESTRE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_SEMESTRE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_TRIMESTRE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_TRIMESTRE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_MOIS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_MOIS)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_JOUR_ANNEE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_JOUR_ANNEE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_JOUR_MOIS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_JOUR_MOIS)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_JOUR_SEMAINE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_JOUR_SEMAINE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NB_SEMAINE_ANNEE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.NB_SEMAINE_ANNEE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.LB_MOIS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.LB_MOIS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.LB_JOUR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.LB_JOUR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.BL_DERNIERE_JOUR_ != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.BL_DERNIERE_JOUR_)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.BL_BISEXTILE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.BL_BISEXTILE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.BL_WEEK_END != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.BL_WEEK_END)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.BL_JOUR_FERIE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row3.BL_JOUR_FERIE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		if(headerIsInserted_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 > 0){
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		}
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("***************************");

System.out.println("Fin de génération du Calendrier: "+TalendDate.formatDate("dd-MM-yyyy HH:mm:ss",TalendDate.getCurrentDate() ));

System.out.println("Temps d'execution :" + TalendDate.diffDate(TalendDate.getCurrentDate(), context.dtDebExecution,"mm")+"Min"+TalendDate.diffDate(TalendDate.getCurrentDate(), context.dtDebExecution,"ss")+"S");


System.out.println("***************************");

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final jGenerateClender jGenerateClenderClass = new jGenerateClender();

        int exitCode = jGenerateClenderClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = jGenerateClender.class.getClassLoader().getResourceAsStream("formation_talend/jgenerateclender_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = jGenerateClender.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("dtDeb", "id_Date");
                        if(context.getStringValue("dtDeb") == null) {
                            context.dtDeb = null;
                        } else {
                            String context_dtDeb_value = context.getProperty("dtDeb");
                            try{
                                if (context_dtDeb_value == null){
                                    context_dtDeb_value = "";
                                }
                                int context_dtDeb_pos = context_dtDeb_value.indexOf(";");
                                String context_dtDeb_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_dtDeb_pos > -1){
                                    context_dtDeb_pattern = context_dtDeb_value.substring(0, context_dtDeb_pos);
                                    context_dtDeb_value = context_dtDeb_value.substring(context_dtDeb_pos + 1);
                                }

                                context.dtDeb=(java.util.Date)(new java.text.SimpleDateFormat(context_dtDeb_pattern).parse(context_dtDeb_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_dtDeb_longValue = Long.valueOf(context_dtDeb_value);
                                    context.dtDeb = new java.util.Date(context_dtDeb_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "dtDeb", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.dtDeb=null;
                                }
                            }
                        }
                        context.setContextType("dtFin", "id_Date");
                        if(context.getStringValue("dtFin") == null) {
                            context.dtFin = null;
                        } else {
                            String context_dtFin_value = context.getProperty("dtFin");
                            try{
                                if (context_dtFin_value == null){
                                    context_dtFin_value = "";
                                }
                                int context_dtFin_pos = context_dtFin_value.indexOf(";");
                                String context_dtFin_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_dtFin_pos > -1){
                                    context_dtFin_pattern = context_dtFin_value.substring(0, context_dtFin_pos);
                                    context_dtFin_value = context_dtFin_value.substring(context_dtFin_pos + 1);
                                }

                                context.dtFin=(java.util.Date)(new java.text.SimpleDateFormat(context_dtFin_pattern).parse(context_dtFin_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_dtFin_longValue = Long.valueOf(context_dtFin_value);
                                    context.dtFin = new java.util.Date(context_dtFin_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "dtFin", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.dtFin=null;
                                }
                            }
                        }
                        context.setContextType("prFolder", "id_String");
                        if(context.getStringValue("prFolder") == null) {
                            context.prFolder = null;
                        } else {
                            context.prFolder=(String) context.getProperty("prFolder");
                        }
                        context.setContextType("nameFile", "id_String");
                        if(context.getStringValue("nameFile") == null) {
                            context.nameFile = null;
                        } else {
                            context.nameFile=(String) context.getProperty("nameFile");
                        }
                        context.setContextType("dtDebExecution", "id_Date");
                        if(context.getStringValue("dtDebExecution") == null) {
                            context.dtDebExecution = null;
                        } else {
                            String context_dtDebExecution_value = context.getProperty("dtDebExecution");
                            try{
                                if (context_dtDebExecution_value == null){
                                    context_dtDebExecution_value = "";
                                }
                                int context_dtDebExecution_pos = context_dtDebExecution_value.indexOf(";");
                                String context_dtDebExecution_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_dtDebExecution_pos > -1){
                                    context_dtDebExecution_pattern = context_dtDebExecution_value.substring(0, context_dtDebExecution_pos);
                                    context_dtDebExecution_value = context_dtDebExecution_value.substring(context_dtDebExecution_pos + 1);
                                }

                                context.dtDebExecution=(java.util.Date)(new java.text.SimpleDateFormat(context_dtDebExecution_pattern).parse(context_dtDebExecution_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_dtDebExecution_longValue = Long.valueOf(context_dtDebExecution_value);
                                    context.dtDebExecution = new java.util.Date(context_dtDebExecution_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "dtDebExecution", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.dtDebExecution=null;
                                }
                            }
                        }
                        context.setContextType("nbJours", "id_Integer");
                        if(context.getStringValue("nbJours") == null) {
                            context.nbJours = null;
                        } else {
                            try{
                                context.nbJours=routines.system.ParserUtils.parseTo_Integer (context.getProperty("nbJours"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "nbJours", e.getMessage()));
                                context.nbJours=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dtDeb")) {
                context.dtDeb = (java.util.Date) parentContextMap.get("dtDeb");
            }if (parentContextMap.containsKey("dtFin")) {
                context.dtFin = (java.util.Date) parentContextMap.get("dtFin");
            }if (parentContextMap.containsKey("prFolder")) {
                context.prFolder = (String) parentContextMap.get("prFolder");
            }if (parentContextMap.containsKey("nameFile")) {
                context.nameFile = (String) parentContextMap.get("nameFile");
            }if (parentContextMap.containsKey("dtDebExecution")) {
                context.dtDebExecution = (java.util.Date) parentContextMap.get("dtDebExecution");
            }if (parentContextMap.containsKey("nbJours")) {
                context.nbJours = (Integer) parentContextMap.get("nbJours");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();

try {
errorCode = null;Implicit_Context_DatabaseProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_Implicit_Context_Database) {
globalMap.put("Implicit_Context_Database_SUBPROCESS_STATE", -1);

e_Implicit_Context_Database.printStackTrace();

}

this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRowGenerator_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRowGenerator_1) {
globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

e_tRowGenerator_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : jGenerateClender");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     162204 characters generated by Talend Open Studio for Data Integration 
 *     on the March 24, 2024, 2:48:30 PM CET
 ************************************************************************************************/